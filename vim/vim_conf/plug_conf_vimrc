
filetype off
" -----------------------------------------------------------
"  		NeoComplete
" - ---------------------------------------------------------
let g:neocomplete#enable_at_startup = 1

" -----------------------------------------------------------
"  		CTRL P
" - ---------------------------------------------------------
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.o
let g:ctrlp_custom_ignore = {
  \ 'dir':  'node_modules\|git',
  \ 'file': '\v\.(exe|so|dll|o)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }

" -----------------------------------------------------------
"  		GOLANG
" - ---------------------------------------------------------
let g:go_fmt_command = "goimports"

" -----------------------------------------------------------
"  		NERD TREE
" - ---------------------------------------------------------
map <C-n> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" -----------------------------------------------------------
"  		NERD COMMENTER
" - ---------------------------------------------------------
nmap <C-/> <plug>NERDComToggleComment
nnoremap <D-/> :NERDComToggleComment<CR>
"nmap <C-/> <plug>NERDCommenterToggle   

" -----------------------------------------------------------
"  		AIRLINE
" - ---------------------------------------------------------
let g:airline_theme = "luna"
" let g:airline_theme = "hybrid"
" let g:airline_theme='solarized'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
set laststatus=2


" -----------------------------------------------------------
"  		EMMET
" - ---------------------------------------------------------
let g:user_emmet_leader_key=','

" -----------------------------------------------------------
"		Vim Organizer
" - ---------------------------------------------------------
au! BufRead,BufWrite,BufWritePost,BufNewFile *.org
au BufEnter *.org            call org#SetOrgFileType()

" -----------------------------------------------------------
"		Rainbow CONGIG
" - ---------------------------------------------------------
au VimEnter * RainbowParenthesesToggle

" -----------------------------------------------------------
"		Vim Markdown
" - ---------------------------------------------------------
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']

" -----------------------------------------------------------
"		Vim Snippet
" - ---------------------------------------------------------
let g:UltiSnipsSnippetDirectories = ['~/.vim/vim_conf/snippet']

function! g:UltiSnips_Complete()
    call UltiSnips#ExpandSnippet()
    if g:ulti_expand_res == 0
        if pumvisible()
            return "\<C-n>"
        else
            call UltiSnips#JumpForwards()
            if g:ulti_jump_forwards_res == 0
               return "\<TAB>"
            endif
        endif
    endif
    return ""
endfunction

au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsListSnippets="<c-e>"
" this mapping Enter key to <C-y> to chose the current highlight item 
" and close the selection list, same as other IDEs.
" CONFLICT with some plugins like tpope/Endwise
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

"let g:SuperTabDefaultCompletionType		= '<C-n>'
"let g:SuperTabCrMapping					= 0
"let g:UltiSnipsExpandTrigger			= '<tab>'
"let g:UltiSnipsJumpForwardTrigger		= '<tab>'
"let g:UltiSnipsJumpBackwardTrigger		= '<s-tab>'
"let g:ycm_key_list_select_completion  	= ['<C-j>', '<C-n>', '<Down>']
"let g:ycm_key_list_previous_completion	= ['<C-k>', '<C-p>', '<Up>']

" -----------------------------------------------------------
"		Vim Indent Guide
" - ---------------------------------------------------------
let g:indent_guides_auto_colors = 1
let g:indent_guides_color_change_percent = 5
let g:indent_guides_start_level = 2
set ts=2 sw=2 et
